name: Release

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "setup.py"
      - "requirements.txt"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      release_notes: ${{ steps.notes.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check
        run: |
          # 現在のバージョンを取得
          CURRENT_VERSION=$(grep "__version__" src/__init__.py | cut -d'"' -f2)

          # 最新のタグを取得
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}

          # バージョンを比較
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: notes
        if: steps.check.outputs.should_release == 'true'
        run: |
          # 最新のタグからの変更を取得
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            CHANGES=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGES=$(git log --pretty=format:"- %s" --no-merges)
          fi

          # リリースノートを生成
          {
            echo "## 変更内容"
            echo ""
            echo "$CHANGES"
            echo ""
            echo "## 依存関係"
            echo "- Python 3.9以上"
          } > release_notes.txt

          # GitHub Actionsの出力に設定
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create tag and release
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          # タグの作成とプッシュ
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: ${{ needs.check-version.outputs.release_notes }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  test-formula-update:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check environment
        run: |
          echo "OS: $(uname -a)"
          echo "Homebrew version: $(brew --version || echo 'Not installed')"
          echo "Python version: $(python --version)"
          echo "Git version: $(git --version)"
          echo "Available commands:"
          which brew python git curl shasum

      - name: Checkout homebrew-crules
        uses: actions/checkout@v4
        with:
          repository: tirano-tirano/homebrew-crules
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-crules

      - name: Set up Homebrew
        run: |
          # Homebrewがインストールされているか確認
          if ! command -v brew &> /dev/null; then
            echo "Homebrewがインストールされていません。インストールを開始します..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> $GITHUB_ENV
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          fi
          brew update
          brew install homebrew/cask/brew-cask

      - name: Verify Formula
        run: |
          cd homebrew-crules
          brew audit Formula/crules.rb
          brew style Formula/crules.rb

      - name: Test Installation
        run: |
          cd homebrew-crules
          brew install ./Formula/crules.rb
          crules --version
          # バージョンの確認
          INSTALLED_VERSION=$(crules --version | cut -d' ' -f2)
          EXPECTED_VERSION="${{ needs.check-version.outputs.version }}"
          if [ "$INSTALLED_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "インストールされたバージョン ($INSTALLED_VERSION) が期待されるバージョン ($EXPECTED_VERSION) と一致しません"
            exit 1
          fi
